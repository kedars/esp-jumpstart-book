***************
*** 101,168 ****
  application’s *Makefile* defines the build instructions for the
  application. Additionally, an optional *sdkconfig.defaults* may be
  placed that picks up the default SDK configuration that should be
- selected for this application. More details about the SDK configuration
- follow.
- 
- SDK Configuration
- ~~~~~~~~~~~~~~~~~
- 
- Given that this is an embedded application with footprint constraints,
- the IDF allows every application to choose its own SDK configuration.
- The SDK configuration allows you to select specific configuration
- options of the SDK that suit your application.
  
- Typically, there is a feature v/s footprint tradeoff, where pulling in a
- new feature will consume greater memory footprint.
  
- Let us now first use the *Hello World* application and launch the SDK
- configuration for this application.
  
  ::
  
-     $ cd esp-jumpstart/1_hello_world
-     $ make -j8 menuconfig
- 
- This will first open a pop-up screen for the SDK configuration.
- 
- For our current scenario, we will choose the default configuration.
- Later in this series, we will look at greater details into the SDK
- configuration options. For now, you can simply exit from this screen. On
- exiting, when asked for a prompt whether you want to save the SDK
- configuration, say “Yes”.
- 
- Build and Flash
- ~~~~~~~~~~~~~~~
  
- At this point you should have connected the device to your development
- host. If you have installed the correct drivers, you should see a new
- device in your machine. For Windows, a new COM port would have been
- created. For Linux/OSX, a new file would appear in /dev/tty.\*. The
- flashing utility should know which serial port is connected to your
- device. This can be configured by setting the ’ESPPORT’ environment
- variable. The following command should help:
  
  ::
  
-     $ export ESPPORT=/dev/tty.SLAB_USBTOUART
  
- The rate at which the flashing utility writes firmware to the device can
- also be configured. This is called the baud rate. The typical rate is
- 115200. But this can be extended upto 921600. Let’s configure the
- maximum baud rate for our flashing.
  
  ::
  
      $ export ESPBAUD=921600
- 
- Now let’s go ahead and ask make to build and flash the firmware.
- 
- ::
- 
      $ make -j8 flash monitor
  
- The SDK will then build the entire SDK and the application. Once the
- build is successful, it will write the generated firmware to the device.
  
  The Code
  --------
--- 83,130 ----
  application’s *Makefile* defines the build instructions for the
  application. Additionally, an optional *sdkconfig.defaults* may be
  placed that picks up the default SDK configuration that should be
+ selected for this application.
  
+ Getting ESP-Jumpstart
+ ---------------------
  
+ The ESP-Jumpstart repository contains a sequence of *applications* that
+ we will use for this exercise. These applications build with the ESP-IDF
+ that you have setup before. Let’s get started by cloning the
+ ESP-Jumpstart git repository https://github.com/espressif/esp-jumpstart.
  
  ::
  
+     $ git clone --recursive https://github.com/espressif/esp-jumpstart
  
+ Since we are building a production-ready firmware here, we would want to
+ base our development on a stable release of IDF. Currently,
+ ESP-Jumpstart uses the stable version 3.2 of ESP-IDF. Let us first
+ switch to that version of ESP-IDF.
  
  ::
  
+     $ cd esp-idf
+     $ git checkout -b release/v3.2 remotes/origin/release/v3.2
+     $ git submodule update --recursive
  
+ Now we build our first, *Hello World*, application from ESP-Jumpstart
+ and flash it on to our development board. You should be already familiar
+ with most of the steps below.
  
  ::
  
+     $ cd esp-jumpstart/1_hello_world
+     $ make -j8 menuconfig
+     $ export ESPPORT=/dev/tty.SLAB_USBTOUART
      $ export ESPBAUD=921600
      $ make -j8 flash monitor
  
+ This will then build the entire SDK and the application. Once the build
+ is successful, it will write the generated firmware to the device.
+ 
+ Once the flashing is successful, the device will reset and you will see
+ the console output from this firmware.
  
  The Code
  --------
